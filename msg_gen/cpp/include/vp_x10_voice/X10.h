/* Auto-generated by genmsg_cpp for file /home/petin/ros_pkgs/vp_x10_voice/msg/X10.msg */
#ifndef VP_X10_VOICE_MESSAGE_X10_H
#define VP_X10_VOICE_MESSAGE_X10_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace vp_x10_voice
{
template <class ContainerAllocator>
struct X10_ {
  typedef X10_<ContainerAllocator> Type;

  X10_()
  : command1(0)
  , command2(0)
  , repeatTime(0)
  {
  }

  X10_(const ContainerAllocator& _alloc)
  : command1(0)
  , command2(0)
  , repeatTime(0)
  {
  }

  typedef int16_t _command1_type;
  int16_t command1;

  typedef int16_t _command2_type;
  int16_t command2;

  typedef int16_t _repeatTime_type;
  int16_t repeatTime;


private:
  static const char* __s_getDataType_() { return "vp_x10_voice/X10"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "412ad5f78068f9ac88fb2866fbc7c142"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int16 command1\n\
int16 command2\n\
int16 repeatTime\n\
\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, command1);
    ros::serialization::serialize(stream, command2);
    ros::serialization::serialize(stream, repeatTime);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, command1);
    ros::serialization::deserialize(stream, command2);
    ros::serialization::deserialize(stream, repeatTime);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(command1);
    size += ros::serialization::serializationLength(command2);
    size += ros::serialization::serializationLength(repeatTime);
    return size;
  }

  typedef boost::shared_ptr< ::vp_x10_voice::X10_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vp_x10_voice::X10_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct X10
typedef  ::vp_x10_voice::X10_<std::allocator<void> > X10;

typedef boost::shared_ptr< ::vp_x10_voice::X10> X10Ptr;
typedef boost::shared_ptr< ::vp_x10_voice::X10 const> X10ConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::vp_x10_voice::X10_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::vp_x10_voice::X10_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace vp_x10_voice

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vp_x10_voice::X10_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vp_x10_voice::X10_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vp_x10_voice::X10_<ContainerAllocator> > {
  static const char* value() 
  {
    return "412ad5f78068f9ac88fb2866fbc7c142";
  }

  static const char* value(const  ::vp_x10_voice::X10_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x412ad5f78068f9acULL;
  static const uint64_t static_value2 = 0x88fb2866fbc7c142ULL;
};

template<class ContainerAllocator>
struct DataType< ::vp_x10_voice::X10_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vp_x10_voice/X10";
  }

  static const char* value(const  ::vp_x10_voice::X10_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vp_x10_voice::X10_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int16 command1\n\
int16 command2\n\
int16 repeatTime\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::vp_x10_voice::X10_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::vp_x10_voice::X10_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vp_x10_voice::X10_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.command1);
    stream.next(m.command2);
    stream.next(m.repeatTime);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct X10_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vp_x10_voice::X10_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::vp_x10_voice::X10_<ContainerAllocator> & v) 
  {
    s << indent << "command1: ";
    Printer<int16_t>::stream(s, indent + "  ", v.command1);
    s << indent << "command2: ";
    Printer<int16_t>::stream(s, indent + "  ", v.command2);
    s << indent << "repeatTime: ";
    Printer<int16_t>::stream(s, indent + "  ", v.repeatTime);
  }
};


} // namespace message_operations
} // namespace ros

#endif // VP_X10_VOICE_MESSAGE_X10_H

